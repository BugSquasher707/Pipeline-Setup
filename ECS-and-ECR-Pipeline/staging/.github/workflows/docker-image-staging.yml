name: Docker Image CI/CD - Staging

on:
  push:
    branches: ['main']

env:
  ENVIRONMENT: staging
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DEPLOYMENT_SECRETS: ${{ secrets.DEPLOYMENT_SECRETS_STAGING }}
  APP_SECRETS: ${{ secrets.APP_SECRETS_STAGING }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: 'arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-action-ocid-role'
          role-session-name: 'GitHubActionsSession'

      - name: Fetch GitHub Secrets and create environment variables
        run: |
          DEPLOYMENT_SECRETS_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.DEPLOYMENT_SECRETS }} --query 'SecretString' --output text)  

          # Extract the required values from the JSON 
          ECR_REPOSITORY=$(echo "$DEPLOYMENT_SECRETS_JSON" | jq -r '.ECR_REPOSITORY')
          ECS_CLUSTER_ARN=$(echo "$DEPLOYMENT_SECRETS_JSON" | jq -r '.ECS_CLUSTER_ARN')
          ECS_SERVICE_NAME=$(echo "$DEPLOYMENT_SECRETS_JSON" | jq -r '.ECS_SERVICE_NAME')
          ECS_SSL_CERTIFICATE_ARN=$(echo "$DEPLOYMENT_SECRETS_JSON" | jq -r '.ECS_SSL_CERTIFICATE_ARN')

          # Set the extracted values as environment variables
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
          echo "ECS_CLUSTER_ARN=$ECS_CLUSTER_ARN" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME" >> $GITHUB_ENV
          echo "ECS_SSL_CERTIFICATE_ARN=$ECS_SSL_CERTIFICATE_ARN" >> $GITHUB_ENV

          # Add masking for sensitive information
          echo "::add-mask::$ECR_REPOSITORY"
          echo "::add-mask::$ECS_CLUSTER_ARN"
          echo "::add-mask::$ECS_SERVICE_NAME"
          echo "::add-mask::$ECS_SSL_CERTIFICATE_ARN"

          echo "Github Secrets fetched successfully."

      - name: Fetch App Secrets from AWS Secrets Manager and create .env file
        run: |
          APP_SECRETS_JSON=$(aws secretsmanager get-secret-value --secret-id ${{ env.APP_SECRETS }} --query 'SecretString' --output text)
          echo "$APP_SECRETS_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > .env
          echo "App Secrets fetched successfully."

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest -f Dockerfile .
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.3

      - name: Terraform deploy
        id: deploy
        run: |
          cd terraform/${{ env.ENVIRONMENT }}
          terraform init
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform apply -auto-approve \
            -var="region=${{ env.AWS_REGION }}" \
            -var="certificate_arn=${{ env.ECS_SSL_CERTIFICATE_ARN }}"

      - name: Force new ECS deployment
        run: |
          CLUSTER_ARN=${{ env.ECS_CLUSTER_ARN }}
          SERVICE_NAME=${{ env.ECS_SERVICE_NAME }}
          aws ecs update-service --cluster "$CLUSTER_ARN" --service "$SERVICE_NAME" --force-new-deployment
          aws ecs wait services-stable --cluster "$CLUSTER_ARN" --services "$SERVICE_NAME"
